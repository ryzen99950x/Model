@using Microsoft.AspNetCore.Identity
@using ShoppingSite.Models;
@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@model IEnumerable<ShoppingSite.Models.Carts>
@{
    ViewData["Title"] = "Details";
}

<style>
    body {
        background-image: url('/img/background.jpg');
        background-color: rgba(255, 255, 255, 0.85);
        background-blend-mode: lighten;
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
        padding-top: 400px;
    }

    .product-image {
        max-width: 300px; 
        height: auto; 
    }

    .img-cardlogo {
        max-width: 300px;
        height: auto;
        margin-top: 5px;
    }

    .order-fix-container {
        max-width: 1100px;
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 30px;
    }
    .order-detail-form {
        background-color: lightgoldenrodyellow;
        padding: 20px;
        margin-bottom: 20px;
        border-radius: 20px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.8);
        position: center;
    }

    .order-detail-form h2 {
        text-align: center;
    }

    .order-detail-form:disabled {
        background-color: darkgray;
    }

    .order-button-container {
        margin: 10px;
    }
    p{
        font-size: 30px;
    }
    table{
        font-size:30px
    }
</style>
<body>
    <h1>注文情報</h1>
    <div class="order-fix-container">
        <h4>カート内</h4>
        <hr />
        <table class="table">
            <thead>
                <tr>
                    <th>商品名</th>
                    <th>画像</th>
                    <th>価格</th>
                    <th>在庫</th>
                    <th>選択個数</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.Product.Name)</td>
                        <td><img src="~/@Html.DisplayFor(modelItem => item.Product.Image)" alt="Product Image" class="product-image"></td>
                        <td>￥@Html.DisplayFor(modelItem => item.Product.Price)</td>
                        <td>
                            @if (item.Product.Stock >= 10)
                            {
                                <p>在庫あり</p>
                            }
                            else if (item.Product.Stock < 10 && item.Product.Stock > 0)
                            {
                                <p>在庫残りわずか</p>
                            }
                        </td>
                        <td>@Html.DisplayFor(modelItem => item.DupCount)</td>
                    </tr>
                }
            </tbody>
            <div class="text-center mt-5">
                <h3>合計金額: ￥@Model.Sum(item => item.Product.Price * item.DupCount)</h3>
            </div>
        </table>
    </div>
    <div class="order-fix-container">
        <h4>配送先情報</h4>
        <hr />
        @if (Model.Any())
        {
            if (Model.First().User.UserName.Contains("@"))
            {
                <div id="UserNameEntered" onchange="checkStockAndSubmit()" data-value="UserNameNone">
                    <p>ユーザー情報編集ページから氏名を追加してください</p>
                </div>
               
            }
            else
            {
                <div id="UserNameEntered" onchange="checkStockAndSubmit()" data-value="UserNameEntered">
                    <p>
                        配送先氏名: @Html.DisplayFor(modelItem => Model.First().User.UserName)
                    </p>
                </div> 
                
            }
            if (Model.First().User.Address == null || Model.First().User.Address == "")
            {
                <div id="AddressEntered" onchange="checkStockAndSubmit()" data-value="AddressNone">
                    <p>ユーザー情報編集ページから配送先住所を追加してください</p>
                </div>
                
            }
            else
            {
                <div id="AddressEntered" onchange="checkStockAndSubmit()" data-value="AddressEntered">
                    <p>
                        住所: @Html.DisplayFor(modelItem => Model.First().User.Address)
                    </p>
                </div>
                
            }

        }
    </div>
    <div class="order-fix-container">
        <h4>お支払い方法</h4>
        <hr />
        @if (Model.Any())
        {
            @if (Model.First().User.Credits.Any())
            {
                <p>クレジットカード:</p>
                <select id="creditCardSelect" onchange="checkStockAndSubmit()">
                    <option value="">クレジットカードを選択してください</option>
                    @foreach (var card in Model.First().User.Credits)
                    {
                        <option value="@card.CardNum2">@card.CardNum2 - @card.CardNum1</option>
                    }
                </select>
                <div id="creditCardLogoContainer"></div>
            }
            else
            {
                <p><br />ユーザー情報編集ページからお支払い情報を追加してください</p>
            }
        }
    </div>

    <!-- 注文確定ボタン -->
    <div class="order-button-container">
        <form asp-action="Complete">
            <button id="submitButton" type="submit" class="text-dark d-flex align-items-center order-detail-form" disabled>
                <h2>注文確定</h2>
                <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>
                <img class="img-fluid img-100 cart-img" src="~/img/cart.svg" alt="cart">
            </button>
            <input type="hidden" name="userId" value="@UserManager.GetUserId(User)" />
        </form>
    </div>

    <script>
        function checkStockAndSubmit() {
            var selectedCardNum = document.getElementById('creditCardSelect').value;
            var firstFourDigits = selectedCardNum.substring(0, 4);
            var submitButton = document.getElementById('submitButton');
            var userNameEntered = document.getElementById('UserNameEntered').getAttribute('data-value')
            var AddressEntered = document.getElementById('AddressEntered').getAttribute('data-value')
                // クレジットカード，名前，住所が設定されていないときは購入はボタンを押せないようにする
            if (selectedCardNum !== "" && (firstFourDigits === "1111" || firstFourDigits === "2222" || firstFourDigits === "3333") && userNameEntered === "UserNameEntered" && AddressEntered === "AddressEntered") {
                submitButton.removeAttribute('disabled');
                displayCardLogo(firstFourDigits);
                return true;
            } else {
                submitButton.setAttribute('disabled', true);
                return false;
            }
        }

        function displayCardLogo(firstFourDigits) {
            var imgSrc = "";
            var imgAlt = "";

            switch (firstFourDigits) {
                case "1111":
                    imgSrc = "/img/JCB_logo.svg";
                    imgAlt = "JCB Card";
                    break;
                case "2222":
                    imgSrc = "/img/Visa_logo.svg";
                    imgAlt = "Visa Card";
                    break;
                case "3333":
                    imgSrc = "/img/Mastercard_logo.svg";
                    imgAlt = "MasterCard";
                    break;
                default:
                    return;
            }

            var existingImg = document.getElementById('creditCardLogo');
            if (existingImg) {
                existingImg.src = imgSrc;
                existingImg.alt = imgAlt;
            } else {
                var imgElement = document.createElement("img");
                imgElement.id = "creditCardLogo";
                imgElement.className = "img-fluid-cardlogo img-cardlogo";
                imgElement.src = imgSrc;
                imgElement.alt = imgAlt;
                document.getElementById('creditCardLogoContainer').appendChild(imgElement);
            }
        }

        function completeOrder() {
            alert("注文を確定しました!!\nご購入ありがとうございました！！！");
        }
    </script>
</body>

